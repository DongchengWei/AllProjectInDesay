package com.udisk;

import java.io.IOException;

import com.android.uiautomator.core.UiCollection;
import com.android.uiautomator.core.UiObject;
import com.android.uiautomator.core.UiObjectNotFoundException;
import com.android.uiautomator.core.UiSelector;
import com.android.uiautomator.testrunner.UiAutomatorTestCase;
import com.runutils.RunTestCase;

import android.os.RemoteException;
import android.util.Log;

public class UDiskTest extends UiAutomatorTestCase {

	//调用自动运行cmd命令
	public static void main(String[] args) throws IOException {  
		 
		RunTestCase runTestCase=new RunTestCase("UDiskPlay",  
				 "com.udisk.UDiskTest", "", "2");  
		runTestCase.setDebug(false);  
		runTestCase.runUiautomator(); 
	} 
		 
	public void testDemo(){
		int folderCounter = 0;
		try{
			PrintInfo();
			getUiDevice().wakeUp();
			getUiDevice().pressHome();
			//com.android.launcher:id/ts_home_button_item_media_id
			try {
				new UiObject(new UiSelector()
						.resourceId("com.android.launcher:id/ts_home_button_item_media_id")).click();				//into multimedia
				new UiObject(new UiSelector()
						.resourceId("com.thundersoft.mediaplayer:id/media_source")).click();						// into switch source 
				new UiObject(new UiSelector()
						.resourceId("com.thundersoft.mediaplayer:id/ts_media_source_button_item_usb2")).click();	//select usb2 source
				new UiObject(new UiSelector()
						.resourceId("com.thundersoft.mediaplayer:id/ts_media_button_item_music_id")).click();		//into music 
				new UiObject(new UiSelector()
						.resourceId("com.thundersoft.mediaplayer:id/tv_media_music_all_folder")).click();			//click folder
				//com.thundersoft.mediaplayer:id/gv_music_folder
				folderCounter = new UiCollection(new UiSelector()
						.resourceId("com.thundersoft.mediaplayer:id/gv_music_folder")).getChildCount();			   	//获取全部文件夹下的文件夹数量
				logAndPrint("All folders : " + folderCounter);
				
//				UiSelector relativelayout = new UiSelector().resourceId("com.thundersoft.mediaplayer:id/gv_music_folder")
//						.childSelector(new UiSelector().className("android.widget.RelativeLayout").index(0));
//				new UiObject(relativelayout).click();//点击第一个文件夹播放
				
				int playedForder = 0;
				while(playedForder < folderCounter){
					//点击第i个文件夹播放
					UiSelector layoutForder = new UiSelector().resourceId("com.thundersoft.mediaplayer:id/gv_music_folder")
							.childSelector(new UiSelector().className("android.widget.RelativeLayout").index(playedForder));
					new UiObject(layoutForder).click();//点击第i个文件夹播放
					//刚开始播放时的第一首歌曲名
					String firstMusicTitle = new UiObject(new UiSelector().resourceId("com.thundersoft.mediaplayer:id/tv_ts_media_music_title")).getText();
					
					boolean forderPlaying = true;//正在播放文件夹内的歌曲
					while(forderPlaying){//一个文件夹没有播放完就一直播放下一曲
						switch (IsPlayingState()) {
						case 1:	//正在播放时歌曲总时间正常，则下一曲继续播放
							new UiObject(new UiSelector().resourceId("com.thundersoft.mediaplayer:id/iv_ts_media_btn_next")).click();//下一曲
							sleep(1000);
							//下一曲后的歌曲名
							String nowTitle = new UiObject(new UiSelector().resourceId("com.thundersoft.mediaplayer:id/tv_ts_media_music_title")).getText();
							if (nowTitle.equals(firstMusicTitle)) {//循环了一遍准备切换到下一个文件夹播放
								new UiObject(new UiSelector()
										.resourceId("com.thundersoft.mediaplayer:id/media_source")).click();						// into switch source 
								new UiObject(new UiSelector()
										.resourceId("com.thundersoft.mediaplayer:id/ts_media_source_button_item_usb2")).click();	//select usb2 source
								new UiObject(new UiSelector()
										.resourceId("com.thundersoft.mediaplayer:id/ts_media_button_item_music_id")).click();		//into music 
								new UiObject(new UiSelector()
										.resourceId("com.thundersoft.mediaplayer:id/tv_media_music_all_folder")).click();			//click folder
								playedForder ++;
								forderPlaying = false;//切换到另外的文件夹播放
							}
							break;
						case 2:	//播放同一首歌且处在暂停或者总时间有变化的情况
							forderPlaying = false;
							playedForder = folderCounter+1;//退出播放停在总时间异常界面
							break;
						default:
							forderPlaying = false;
							playedForder = folderCounter+1;//退出播放停在总时间异常界面
							break;
						}
					}
				}
			} catch (UiObjectNotFoundException e) {
				logAndPrint("UDiskPlay Test fail:UiObjectNotFoundException");
			}
		} catch (RemoteException e) {
			e.printStackTrace();
		}
	}
	


	//播放器播放判断（隔5秒获取播放时间判断是否在播放）
	private int IsPlayingState(){
		int playState = 0;
		try {
			String nowPlayTime = new UiObject(new UiSelector().resourceId("com.thundersoft.mediaplayer:id/tv_start_time")).getText();
			//com.thundersoft.mediaplayer:id/tv_end_time
			String nowEndTime = new UiObject(new UiSelector().resourceId("com.thundersoft.mediaplayer:id/tv_end_time")).getText();
			String strMusicTitle = new UiObject(new UiSelector().resourceId("com.thundersoft.mediaplayer:id/tv_ts_media_music_title")).getText();
			logAndPrint("Music Title:" + strMusicTitle);
			sleep(2000);								//过5秒再读取播放时间，读取歌曲名判断是否是同一首歌
			String fiveSecPlayTime = new UiObject(new UiSelector().resourceId("com.thundersoft.mediaplayer:id/tv_start_time")).getText();
			String fiveSecEndTime = new UiObject(new UiSelector().resourceId("com.thundersoft.mediaplayer:id/tv_end_time")).getText();
			String fiveSecMusicTitle = new UiObject(new UiSelector().resourceId("com.thundersoft.mediaplayer:id/tv_ts_media_music_title")).getText();
			if (fiveSecMusicTitle.equals(strMusicTitle)) {	//同一首歌的情况下1.正在播放 ， 2.播放时歌曲总时间跳动
				if ((!nowPlayTime.equals(fiveSecPlayTime)) && fiveSecEndTime.equals(nowEndTime)) {
					playState = 1;//正在播放时歌曲总时间正常
				}else {
					playState = 2;//处在暂停或者总时间有变化的情况
					logAndPrint("strMusicTitle=" + strMusicTitle + ",fiveSecMusicTitle=" + fiveSecMusicTitle + ", nowEndTime=" + nowEndTime + ",fiveSecEndTime=" + fiveSecEndTime);
				}
			}else{//2s内播放了不同歌曲
				playState = 3;
				logAndPrint("strMusicTitle=" + strMusicTitle + ",fiveSecMusicTitle=" + fiveSecMusicTitle);
			}
		} catch (UiObjectNotFoundException e) {
			// TODO Auto-generated catch block
			logAndPrint("IsPlayingOK() fail: UiObjectNotFoundException");
		}
		return playState;
	}
	
	public void logForResult(String str) {
		System.out.println("=========>>>>" + str + "<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
		Log.d("TESTRESULT","=========>>>>" + str + "<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
	}
	
	
	//控制台输出和logcat输出信息
	public void logAndPrint(String str){
		System.out.println("=========" + str);
		Log.d("BLUETOOTRESULT","=========" + str);
	}
	
	//输出版本信息
	public void PrintInfo(){
		System.out.println("==================================================");
		System.out.println("=========G5Android Bluetooth AutoTest v0.0.1======");
		System.out.println("=========       2016-12-30       =================");
		System.out.println("=========        DesaySV         =================");
		System.out.println("==================================================");
		Log.d("BLUETOOTHAUTOTEST","=========G5Android Bluetooth AutoTest v0.0.1======");
		Log.d("BLUETOOTHAUTOTEST","=========       2016-12-30       =================");
		Log.d("BLUETOOTHAUTOTEST","=========        DesaySV         =================");
		Log.d("BLUETOOTHAUTOTEST","==================================================");
	}
	
}
