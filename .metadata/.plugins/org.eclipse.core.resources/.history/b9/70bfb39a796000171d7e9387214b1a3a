package com.wifi;

import java.io.IOException;

import com.android.uiautomator.core.UiDevice;
import com.android.uiautomator.core.UiObject;
import com.android.uiautomator.core.UiObjectNotFoundException;
import com.android.uiautomator.core.UiSelector;
import com.android.uiautomator.testrunner.UiAutomatorTestCase;
import com.otherutils.Utils;
import com.pageutil.HomePage;
import com.pageutil.SettingsPage;
import com.pageutil.WifiTabPage;
import com.runutils.RunTestCase;

import android.os.Bundle;
import android.os.RemoteException;
import android.util.Log;

/**
 * @author uidq0460
 * Case: wifi打开-下滑列表-上滑列表-关闭wifi	1000次
 * 前提：
 * 操作：wifi打开-下滑列表-上滑列表-关闭wifi
 * 命令：uiautomator runtest AutoTest.jar -c com.wifi.WifiScroll &
 * 其他：设置测试次数,每个-e对应一个参数，-e TestTimes 100
 * uiautomator runtest AutoTest.jar -e TestTimes 100 -c com.wifi.WifiScroll &
 */
public class WifiScroll extends UiAutomatorTestCase {
	
	//调用自动运行cmd命令
	public static void main(String[] args) throws IOException {  
		 
		RunTestCase runTestCase=new RunTestCase("AutoTest",  
				 "com.wifi.WifiScroll", "", "3");  
		runTestCase.setDebug(false);  
		runTestCase.runUiautomator();
//		String logPathStr = runTestCase.runUiautomator();//返回文件路径
//		new LogUtil().analyseLog(logPathStr);//分析日志
	} 
	
	public void testDemo(){
		try{
			CaseInfo();
			getUiDevice().wakeUp();
			Utils.stopRunningWatcher();
			
			//获取测试次数
			long testTimes = 0;
			Bundle paramsBundle = getParams();//获取参数
			String resultStr = paramsBundle.getString("TestTimes");
			if (resultStr != null) {
				testTimes = Long.parseLong(resultStr);
			} else {
				testTimes = 100;
			}
			Utils.logPrint("testTimes = " + testTimes);
			
			assertEquals(true, WifiSwitchConnectPressureTest()); //压力测试：启动/退出app
			
			UiDevice.getInstance().removeWatcher("stopRunning"); //移除监视器
		} catch (RemoteException e) {
			e.printStackTrace();
		}
	}
	
	private boolean WifiSwitchConnectPressureTest() {
		boolean isTestPass = false;
		HomePage homePage = new HomePage();
		SettingsPage settingsPage = new SettingsPage();
		WifiTabPage wifiPage = new WifiTabPage();
		
		homePage.goBackHome();
		try {
			homePage.intoSettings();
			settingsPage.intoWifiTab();
			
			wifiPage.turnOnWifi(5000);
			if (wifiPage.isWifiConnected(30000)) {//wifi连接上
				UiObject firstAP = wifiPage.getWifiItemObject(0);//列表第1个热点
				UiObject secondAP = wifiPage.getWifiItemObject(1);//列表第二个热点
				String firstAPStr,secondAPStr;
				//获取wifi名称
				firstAPStr = firstAP
						.getChild(new UiSelector()
						.resourceId("android:id/title"))
						.getText();
				secondAPStr = secondAP
						.getChild(new UiSelector()
								.resourceId("android:id/title"))
						.getText();
				
				boolean keepTesting = true;
				int testCounter = 0;
				int passCounter = 0;
				while(keepTesting){
					testCounter ++;
					
					wifiPage.turnOnWifi(5000);
					Utils.logPrint("switch connect 1st AP " + firstAPStr + " ...");
					if (wifiPage.connectAP(firstAPStr, 30000, 3)) {
						Utils.logPrint("connect " + firstAPStr + " OK");
						sleep(1000);
						wifiPage.turnOffWifi(5000);
						if (wifiPage.waitUntilGone(5000)) {//十秒内切换到其他界面则退出测试
							keepTesting = false;
							Utils.logPrint("wifiPage.waitUntilGone(5000):gone");
						}else {
							wifiPage.turnOnWifi(5000);
							Utils.logPrint("switch connect 2nd AP " + secondAPStr + " ...");
							if (wifiPage.connectAP(secondAPStr, 30000, 3)) {
								Utils.logPrint("connect " + secondAPStr + " OK");
								sleep(1000);
								wifiPage.turnOffWifi(5000);
								//打开wifi后等待十秒让wifi连接上,十秒内切换到其他界面则退出测试
								if (wifiPage.waitUntilGone(5000)) {
									keepTesting = false;
									Utils.logPrint("wifiPage.waitUntilGone(5000):gone");
								}
								if (!wifiPage.isWifiOn()) {
									passCounter ++;
									Utils.logPrint("turn off OK");
									Utils.logForResult("Test Pass:" + passCounter + " times,Total Test:" + testCounter);
								}else {
									Utils.logPrint("turn off fail,exit test...");
									keepTesting = false;
								}
							} else {
								Utils.logPrint("connect 2nd AP " + secondAPStr + " fail after try 3 times");
								keepTesting = false;
							}
						}
					} else {
						Utils.logPrint("connect 1st AP " + firstAPStr + " fail after try 3 times");
						keepTesting = false;
					}
					if (testCounter == 1000) {
						if (passCounter == testCounter) {
							isTestPass = true;//测试通过
						}
						keepTesting = false;
						Utils.logForResult("Test Pass:" + passCounter + " times,Total Test:" + testCounter);
					}
				}
			}
		} catch (UiObjectNotFoundException e1) {
			Utils.logPrint("UiObject not found" + e1.toString());
		}
		
		return isTestPass;
		
	}
	//输出版本信息
	public static void CaseInfo(){
		System.out.println("==================================================");
		System.out.println("=========G5Android AutoTest v0.0.1================");
		System.out.println("===case:Wifi on & Auto connect & swithc connect===");
		System.out.println("==================================================");
		Log.d("BLUETOOTHAUTOTEST","=========G5Android AutoTest v0.0.1================");
		Log.d("BLUETOOTHAUTOTEST","===case:Wifi on & Auto connect & swithc connect===");
		Log.d("BLUETOOTHAUTOTEST","==================================================");
	}
}
